plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs.kotlin'
}

android {
    def conf = rootProject.configs
    compileSdkVersion conf.compileSdkVersion

    defaultConfig {
        minSdkVersion conf.minSdkVersion
        targetSdkVersion conf.targetSdkVersion

        applicationId conf.appId
        versionCode conf.versionCode
        versionName conf.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            manifestPlaceholders = [enableCrashReporting: "false"]
            minifyEnabled false
        }

        release {
            manifestPlaceholders = [enableCrashReporting: "true"]
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }

    flavorDimensions "environment", "tier"
    productFlavors {
        dev {
            dimension "environment"
            applicationIdSuffix ".dev"
            versionName "${defaultConfig.versionName}-${productFlavors[0].name}"
            buildConfigField("String", "BASE_URL", baseUrlDev)
        }

        prod {
            dimension "environment"
            buildConfigField("String", "BASE_URL", baseUrlDev)
        }

        demo {
            dimension "tier"
            applicationIdSuffix ".demo"
            buildConfigField("Boolean", "SHOW_LOG", "true")
        }

        full {
            dimension "tier"
            buildConfigField("Boolean", "SHOW_LOG", "false")
        }
    }

    applicationVariants.all { variant ->
        def versionName = "$variant.versionName"
        def versionCode = "$variant.versionCode"

        if ("$variant.flavorName".contains("Demo")) {
            versionName = "$variant.versionName-demo"
        }

        variant.outputs.each { output ->
            output.setVersionNameOverride(versionName)

            def apkFileName = "PokeApp-${versionName}-${variant.buildType.name}-${versionCode}-${getDate()}.apk"
            output.outputFileName = new File(apkFileName)
        }
    }

}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    def libs = rootProject.libs

    implementation libs.ktx

    implementation libs.dagger
    implementation libs.daggerandroid
    kapt libs.daggercompiler
    kapt libs.daggerandroidprocessor

    implementation libs.rxjava
    implementation libs.rxandroid

    implementation libs.material
    implementation libs.appcompat
    implementation libs.constraintlayout

    implementation libs.lifecycleruntime
    kapt libs.lifecyclecompiler

    implementation libs.navigationfragment
    implementation libs.navigationui

    implementation libs.paging
    implementation libs.pagingrx

    implementation libs.roomruntime
    implementation libs.roomrx
    kapt libs.roomcompiler

    implementation(libs.okhttp) { force = true }
    implementation libs.okhttplogger

    implementation libs.retrofit
    implementation libs.retrofitrx
    implementation libs.retrofitgson
    implementation libs.gson

    implementation libs.timber

    implementation libs.glide
    kapt libs.glidecompiler

    implementation libs.shimmer

    testImplementation libs.junit
    androidTestImplementation libs.androidjunit
    androidTestImplementation libs.androidtesing
    androidTestImplementation libs.espresso

    kaptTest libs.daggercompiler
    kaptAndroidTest libs.daggercompiler
}

static def getDate() {
    return new Date().format('yyyyMMddHHmm')
}